name: DownloaderAction
on:
  repository_dispatch:
    types:
      - download

jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.token < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Start Steps
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏳Starting..."
            }
          EOF
          } || :
      - name: Create directory
        shell: bash
        run: |
          mkdir -p download
      - name: Setup Python3
        if: ${{ success() }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Setup latest yt-dlp
        if: ${{ success() }}
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "🛠Setup..."
            }
          EOF
          } || :
          type yt-dlp > /dev/null 2>&1 || python3 -m pip install -U yt-dlp
      - name: Setup and cache dependency
        if: ${{ success() }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ffmpeg gawk
          version: 1.0
          execute_install_scripts: true
      - name: When dependency is not found in the cache
        if: ${{ success() }}
        shell: bash
        run: |
          retry=0
          flag=false
          until "${flag}" || (( "${retry}" == 1000 )); do
            echo "Retry count: ${retry}"
            echo "Flag status: ${flag}"
            if type ffmpeg > /dev/null 2>&1 && type ffprobe > /dev/null 2>&1 && type gawk > /dev/null 2>&1; then
              flag=true
            else
              sudo apt-get update
              sudo apt-get install -y ffmpeg gawk
              if type ffmpeg > /dev/null 2>&1 && type ffprobe > /dev/null 2>&1 && type gawk > /dev/null 2>&1; then
                flag=true
              else
                ((retry++)) || true
              fi
            fi
          done
      - name: Setup awk script
        if: ${{ success() }}
        shell: bash
        run: |
          cat <<"EOF" > progress.awk
          BEGIN{RS="frame="}
          /Duration: /{
            match($0, /[0-2][0-3]:[0-5][0-9]:[0-5][0-9]/)
            TIME=substr($0, RSTART, RLENGTH)
            split(TIME, array, ":")
            Dura=array[1]*3600+array[2]*60+array[3]
            Start=systime()
            Old=-1
          }
          /time=/{
            match($0, /[0-2][0-3]:[0-5][0-9]:[0-5][0-9]/)
            Now=substr($0, RSTART, RLENGTH)
            split(Now, array1, ":")
            Prog=array1[1]*3600+array1[2]*60+array1[3]
            Ratio=int(Prog/Dura*100)
            if ( Ratio != Old ) {
              if ( Ratio % 5 == 0 ) {
                Current=systime()
                px=Current-Start
                Remain=""
                if ( Prog != 0 ) {
                  rx=(Dura*px)/Prog-px
                  Remain=sprintf(" ETA: %02d:%02d:%02d", int(int(rx)/3600), int(int(rx)/60)%60, int(rx)%60)
                }
                printf ("%s/%s(%3d%%) ERT: %02d:%02d:%02d%s\n", Now, TIME, Ratio, int(int(px)/3600), int(int(px)/60)%60, int(px)%60, Remain)
                system("")
              }
              Old=Ratio
            }
          }
          EOF
      - name: Confirmation of link survival
        if: ${{ success() }}
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            {
              curl -s -X POST \
                ${{ secrets.ENDPOINT_URL }} \
                -H "Accept: application/json" \
                -H "Content-type: application/json" \
                -m 18000 \
                --retry 100 \
                --retry-all-errors \
                -d @- <<EOF
              {
                "status": "progress",
                "number": ${{ github.run_number }},
                "channel": ${{ toJSON(github.event.client_payload.channel) }},
                "message": ${{ toJSON(github.event.client_payload.message) }},
                "token": ${{ toJSON(github.event.client_payload.token) }},
                "link": ${{ toJSON(github.event.client_payload.link) }},
                "content": "🔍Checking link status..."
              }
          EOF
            } || :
            retry=0
            flag=false
            status=""
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              status="$(curl -siL -m 18000 --retry 100 --retry-all-errors ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
              if [[ "${status}" == "200" || "${status}" == "302" || "${status}" == "307" ]]; then
                flag=true
              else
                ((retry++)) || true
                sleep 1
              fi
            done
            if [[ "${status}" != "200" && "${status}" != "302" && "${status}" != "307" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
              exit 2
            fi
          fi
      - name: Start Download
        if: ${{ success() }}
        id: download
        timeout-minutes: 10
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏬Downloading..."
            }
          EOF
          } || :
          retry=0
          flag=false
          not_video=false
          cookie_path=$(pwd) && \
          echo "${{ secrets.TWITTER_COOKIES }}" >> cookie.txt && \
          cd download && \
          IFS=$'\n' && \
          until "${flag}" || (( "${retry}" == 1000 )); do
            echo "Retry count: ${retry}"
            echo "Flag status: ${flag}"
            yt-dlp -q \
              --force-overwrites \
              --cookies "${cookie_path}/cookie.txt" \
              --downloader "$(type ffmpeg | awk '{print $3}')" \
              -o "%(id)s_%(autonumber)s.%(ext)s" \
              ${{ toJSON(github.event.client_payload.link) }} > /dev/null 2>&1 && yt_status="0" || yt_status="1"
            if [[ "${yt_status}" == "0" || "$(ls)" != "" ]]; then
              for file_name in $(ls -tr); do
                if ffprobe -v error -f lavfi movie="${file_name}" > /dev/null 2>&1; then
                  flag=true
                else
                  :
                fi
              done
            elif [[ "${yt_status}" == "1" && "$(ls)" == "" ]]; then
              flag=true
              not_video=true
            else
              not_video=true
            fi
            if "${flag}"; then
              :
            else
              ((retry++)) || true
              sleep 1
            fi
          done
          if "${not_video}"; then
            status="notvideo" && \
            echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
            exit 2
          fi
      - name: Check and Convert Files
        if: ${{ success() }}
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          files_num=$(ls -tr | wc -l) && \
          if (( 26214400 < $(echo $(ls -trl|awk 'NR>1{print $5}'|tr \\n +)0|bc) )); then
            file_list=()
            IFS=$'\n' && \
            for file_name in $(ls -tr); do
              if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "${files_num}" )) )); then
                :
              else
                file_list+=("${files_num}")
              fi
            done
            count=1
            for file_name in $(ls -tr); do
              if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "${files_num}" )) )); then
                :
              else
                num=$((count++))
                {
                  curl -s -X POST \
                    ${{ secrets.ENDPOINT_URL }} \
                    -H "Accept: application/json" \
                    -H "Content-type: application/json" \
                    -m 18000 \
                    --retry 100 \
                    --retry-all-errors \
                    -d @- <<EOF
                  {
                    "status": "progress",
                    "number": ${{ github.run_number }},
                    "channel": ${{ toJSON(github.event.client_payload.channel) }},
                    "message": ${{ toJSON(github.event.client_payload.message) }},
                    "token": ${{ toJSON(github.event.client_payload.token) }},
                    "link": ${{ toJSON(github.event.client_payload.link) }},
                    "content": "🔁Converting...(${num} / ${#file_list[@]})"
                  }
          EOF
                } || :
                mkdir -p "${dir}/conv" && \
                ffmpeg -i "${file_name}" -c:v libvpx -r 25 -crf 33 -b:v 0 -fs $(( 25 / "${files_num}" ))MB "${dir}/conv/${file_name%.*}.webm" | \
                  awk -f "${dir}/progress.awk" | \
                  echo '{"status": "progress", "number": ${{ github.run_number }}, "channel": ${{ toJSON(github.event.client_payload.channel) }}, "message": ${{ toJSON(github.event.client_payload.message) }}, "token": ${{ toJSON(github.event.client_payload.token) }}, "link": ${{ toJSON(github.event.client_payload.link) }}, "content": "'"🔁Converting...(${num} / ${#file_list[@]})\n[$(cat)]"'"}' | \
                  curl -s -X POST \
                    ${{ secrets.ENDPOINT_URL }} \
                    -H "Accept: application/json" \
                    -H "Content-type: application/json" \
                    -m 18000 \
                    --retry 100 \
                    --retry-all-errors \
                    -d @- || :
              fi
            done
          fi
      - name: Upload files
        if: ${{ success() }}
        id: upload
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏫Uploading..."
            }
          EOF
          } || :
          dir=$(pwd) && \
          cd download && \
          IFS=$'\n' && \
          if (( "$(ls|wc -l)" > 1 )); then
            for file_name in $(ls -tr); do
              if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
                :
              elif (( "$(wc -c < "${dir}/conv/${file_name%.*}.webm")" <= 26214400 )); then
                :
              else
                status="sizeover" && \
                echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
                exit 2
              fi
            done
            options=()
            options+=(-F 'status=success')
            options+=(-F 'number=${{ github.run_number }}')
            options+=(-F 'commandType=dl')
            options+=(-F 'actionType=multi')
            options+=(-F 'channel=${{ toJSON(github.event.client_payload.channel) }}')
            options+=(-F 'message=${{ toJSON(github.event.client_payload.message) }}')
            options+=(-F 'token=${{ toJSON(github.event.client_payload.token) }}')
            options+=(-F 'link=${{ toJSON(github.event.client_payload.link) }}')
            options+=(-F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}')
            if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= 26214400 )); then
              options+=(-F "convert=false")
            else
              options+=(-F "convert=true")
            fi
            index=0
            list=()
            for file_name in $(ls -tr); do
              num=$((index++))
              if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= 26214400 )); then
                options+=(-F "name${num}=${file_name}")
                options+=(-F "file${num}=@${file_name}")
                list+=("${file_name}")
              else
                if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "$(ls|wc -l)" )) )); then
                  options+=(-F "name${num}=${file_name}")
                  options+=(-F "file${num}=@${file_name}")
                  list+=("${file_name}")
                else
                  options+=(-F "name${num}=${file_name%.*}.webm")
                  options+=(-F "file${num}=@${dir}/conv/${file_name%.*}.webm")
                  list+=("${dir}/conv/${file_name%.*}.webm")
                fi
              fi
            done
            total_size=$(echo $(echo "${list[@]}" | tr ' ' \\n | grep -v '^$' | xargs -I@ bash -c 'ls -l @' | awk '{print $5}' | grep -v '^$' | tr \\n '+')0 | bc)
            echo "Total size: ${total_size}"
            options+=(-F "size=${total_size}")
            if (( "${total_size}" <= 26214400 )); then
              options+=(-F "oversize=false")
            else
              options+=(-F "oversize=true")
            fi
            curl -s -X POST \
              -H "Content-type: multipart/form-data" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              "${options[@]}" \
              ${{ secrets.ENDPOINT_URL }}
          else
            file_name="$(ls)" && \
            if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
              echo "Total size: $(wc -c < "${file_name}")"
              curl -s -X POST \
                -H "Content-type: multipart/form-data" \
                -m 18000 \
                --retry 100 \
                --retry-all-errors \
                -F "status=success" \
                -F 'number=${{ github.run_number }}' \
                -F "commandType=dl" \
                -F "actionType=single" \
                -F "convert=false" \
                -F "oversize=false" \
                -F "size=$(wc -c < "${file_name}")" \
                -F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}' \
                -F 'channel=${{ toJSON(github.event.client_payload.channel) }}' \
                -F 'message=${{ toJSON(github.event.client_payload.message) }}' \
                -F 'token=${{ toJSON(github.event.client_payload.token) }}' \
                -F 'link=${{ toJSON(github.event.client_payload.link) }}' \
                -F "name1=${file_name}" \
                -F "file1=@${file_name}" \
                ${{ secrets.ENDPOINT_URL }}
            else
              total_size=$(wc -c < "${dir}/conv/${file_name%.*}.webm")
              echo "Total size: ${total_size}"
              if (( "${total_size}" <= 26214400 )); then
                curl -s -X POST \
                  -H "Content-type: multipart/form-data" \
                  -m 18000 \
                  --retry 100 \
                  --retry-all-errors \
                  -F "status=success" \
                  -F 'number=${{ github.run_number }}' \
                  -F "commandType=dl" \
                  -F "actionType=single" \
                  -F "convert=true" \
                  -F "oversize=false" \
                  -F "size=${total_size}" \
                  -F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}' \
                  -F 'channel=${{ toJSON(github.event.client_payload.channel) }}' \
                  -F 'message=${{ toJSON(github.event.client_payload.message) }}' \
                  -F 'token=${{ toJSON(github.event.client_payload.token) }}' \
                  -F 'link=${{ toJSON(github.event.client_payload.link) }}' \
                  -F "name1=${file_name%.*}.webm" \
                  -F "file1=@${dir}/conv/${file_name%.*}.webm" \
                  ${{ secrets.ENDPOINT_URL }}
              else
                status="sizeover" && \
                echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
                exit 2
              fi
            fi
          fi
      - name: Link has expired
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == 'notfound' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Video file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == 'notvideo' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry, the video file did not exist at this link!"
          }
          EOF
      - name: Uploaded file size exceeded
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == 'sizeover'
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry, the file could not be uploaded because its size exceeds 25 MB!"
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 10 minits and timed out."
          }
          EOF

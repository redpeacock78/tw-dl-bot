name: DownloaderAction
on:
  repository_dispatch:
    types:
      - download

jobs:
  run-with-container:
    runs-on: ubuntu-latest
    # name: Run
    container:
      image: ghcr.io/${{ github.repository_owner }}/tw-dl-runner:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.token < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Start Steps
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -o /dev/null \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏳Starting..."
            }
          EOF
          } || :
      - name: Setup latest yt-dlp
        if: ${{ success() }}
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -o /dev/null \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "🛠Setup..."
            }
          EOF
          } || :
          type yt-dlp > /dev/null 2>&1 || \
          {
            retry=0 && \
            flag=false && \
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}" && \
              echo "Flag status: ${flag}" && \
              # stable_url="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp" && \
              nightly_url="https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/latest/download/yt-dlp" && \
              # sudo curl -sL \
              #   --retry 100 \
              #   --retry-all-errors \
              #   -o /usr/local/bin/yt-dlp \
              #   "${stable_url}" && \
              # sudo chmod a+rx /usr/local/bin/yt-dlp && \
              version="$(curl -sI -m 18000 --retry 100 --retry-all-errors "${nightly_url}" | grep 'location: ' | awk -F '/' '{print $8}')" && \
              yt-dlp --update-to "nightly@${version}" && \
              {
                flag=true
              } || \
              {
                ((retry++)) || true
              }
            done
          }
      - name: Setup awk script
        if: ${{ success() }}
        shell: bash
        run: |
          cat <<'EOF' > progress.awk
          BEGIN{RS="frame="}
          /Duration: /{
            match($0, /[0-2][0-3]:[0-5][0-9]:[0-5][0-9]/)
            TIME=substr($0, RSTART, RLENGTH)
            split(TIME, array, ":")
            Dura=array[1]*3600+array[2]*60+array[3]
            Start=systime()
            Old=-1
          }
          /time=/{
            match($0, /[0-2][0-3]:[0-5][0-9]:[0-5][0-9]/)
            Now=substr($0, RSTART, RLENGTH)
            split(Now, array1, ":")
            Prog=array1[1]*3600+array1[2]*60+array1[3]
            Ratio=int(Prog/Dura*100)
            if ( Ratio != Old ) {
              if ( Ratio % 1 == 0 ) {
                Current=systime()
                px=Current-Start
                Remain=""
                if ( Prog != 0 ) {
                  rx=(Dura*px)/Prog-px
                  Remain=sprintf(" ETA:%02d:%02d:%02d", int(int(rx)/3600), int(int(rx)/60)%60, int(rx)%60)
                }
                printf ("%s/%s(%s%)%s\n", Now, TIME, Ratio, Remain)
                system("")
              }
              Old=Ratio
            }
          }
          EOF
      - name: Setup bash script
        if: ${{ success() }}
        shell: bash
        run: |
          cat <<'EOF' > /usr/local/bin/conv_progress.sh
          #!/usr/bin/env bash
          run_number=${{ github.run_number }}
          start_time=${{ toJSON(github.event.client_payload.startTime) }}
          channel=${{ toJSON(github.event.client_payload.channel) }}
          message=${{ toJSON(github.event.client_payload.message) }}
          token=${{ toJSON(github.event.client_payload.token) }}
          link=${{ toJSON(github.event.client_payload.link) }}

          interval=1
          last="$(openssl sha256 -r ${1} | awk '{print $1}')"
          while true; do
            sleep "${interval}"
            current="$(openssl sha256 -r ${1} | awk '{print $1}')"
            if [[ "${last}" != "${current}" ]]; then
              retry=0 && \
              flag=false && \
              until "${flag}" || (( "${retry}" == 1000 )); do
                if ((  "${retry}" > 0 )); then
                  echo "Retry count: ${retry}"
                  echo "Flag status: ${flag}"
                fi
                progress="$(cat ${1} | tail -n1)"
                if grep -e '^/' <<< "${progress}" > /dev/null; then
                  progress="00:00:00${progress}"
                else
                  :
                fi
                echo '{"status": "progress", "number": "'"${run_number}"'", "startTime": "'"${start_time}"'", "channel": "'"${channel}"'", "message": "'"${message}"'", "token": "'"${token}"'", "link": "'"${link}"'", "content": "'"${4}(${2} / ${3})\n${progress}"'"}' | \
                curl -s -X POST \
                  ${{ secrets.ENDPOINT_URL }} \
                  -H "Accept: application/json" \
                  -H "Content-type: application/json" \
                  -m 18000 \
                  --retry 100 \
                  --retry-all-errors \
                  -d @- > /dev/null 2>&1 && \
                {
                  flag=true
                } || \
                {
                  ((retry++)) || true
                }
              done
              last="${current}"
            fi
          done
          EOF
          chmod +x /usr/local/bin/conv_progress.sh
      - name: Confirmation of link survival
        if: ${{ success() }}
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            {
              curl -s -X POST \
                ${{ secrets.ENDPOINT_URL }} \
                -H "Accept: application/json" \
                -H "Content-type: application/json" \
                -m 18000 \
                --retry 100 \
                --retry-all-errors \
                -o /dev/null \
                -d @- <<EOF
              {
                "status": "progress",
                "number": ${{ github.run_number }},
                "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
                "channel": ${{ toJSON(github.event.client_payload.channel) }},
                "message": ${{ toJSON(github.event.client_payload.message) }},
                "token": ${{ toJSON(github.event.client_payload.token) }},
                "link": ${{ toJSON(github.event.client_payload.link) }},
                "content": "🔍Checking link status..."
              }
          EOF
            } || :
            retry=0 && \
            flag=false && \
            status="" && \
            until "${flag}" || (( "${retry}" == 1000 )); do
              if (( "${retry}" > 0 )); then
                {
                  curl -s -X POST \
                    ${{ secrets.ENDPOINT_URL }} \
                    -H "Accept: application/json" \
                    -H "Content-type: application/json" \
                    -m 18000 \
                    --retry 100 \
                    --retry-all-errors \
                    -o /dev/null \
                    -d @- <<EOF
                  {
                    "status": "progress",
                    "number": ${{ github.run_number }},
                    "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
                    "channel": ${{ toJSON(github.event.client_payload.channel) }},
                    "message": ${{ toJSON(github.event.client_payload.message) }},
                    "token": ${{ toJSON(github.event.client_payload.token) }},
                    "link": ${{ toJSON(github.event.client_payload.link) }},
                    "content": "🔍Checking link status...(Retry ${retry} / 1000)"
                  }
          EOF
                } || :
              fi
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              status="$(curl -siL -m 18000 --retry 100 --retry-all-errors ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
              if [[ "${status}" == "200" || "${status}" == "302" || "${status}" == "307" ]]; then
                flag=true
              else
                ((retry++)) || true
                sleep 1
              fi
            done
            if [[ "${status}" != "200" && "${status}" != "302" && "${status}" != "307" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
              exit 2
            fi
          fi
      - name: Start Download
        if: ${{ success() }}
        id: download
        timeout-minutes: 10
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -o /dev/null \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏬Downloading..."
            }
          EOF
          } || :
          retry=0 && \
          flag=false && \
          not_video=false && \
          cookie_path=$(pwd) && \
          url="$(echo ${{ toJSON(github.event.client_payload.link) }} | awk -F '/' '{OFS="/";sub(/^x.com$/,"twitter.com",$3);print $0}')" && \
          echo "${{ secrets.TWITTER_COOKIES }}" >> cookie.txt && \
          mkdir -p download && \
          cd download && \
          IFS=$'\n' && \
          until "${flag}" || (( "${retry}" == 1000 )); do
            echo "Retry count: ${retry}"
            echo "Flag status: ${flag}"
            if (( "${retry}" > 0 )); then
              {
                curl -s -X POST \
                  ${{ secrets.ENDPOINT_URL }} \
                  -H "Accept: application/json" \
                  -H "Content-type: application/json" \
                  -m 18000 \
                  --retry 100 \
                  --retry-all-errors \
                  -o /dev/null \
                  -d @- <<EOF
                {
                  "status": "progress",
                  "number": ${{ github.run_number }},
                  "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
                  "channel": ${{ toJSON(github.event.client_payload.channel) }},
                  "message": ${{ toJSON(github.event.client_payload.message) }},
                  "token": ${{ toJSON(github.event.client_payload.token) }},
                  "link": ${{ toJSON(github.event.client_payload.link) }},
                  "content": "⏬Downloading...(Retry ${retry} / 1000)"
                }
          EOF
              } || :
            fi
            yt_result="$(mktemp)"
            yt-dlp \
              -R 1000 \
              --force-overwrites \
              --cookies "${cookie_path}/cookie.txt" \
              --downloader "$(type ffmpeg | awk '{print $3}')" \
              -o "%(id)s_%(autonumber)s.%(ext)s" \
              "${url}" > "${yt_result}" 2>&1 && \
              {
                yt_status="0"
                true
              } || \
              {
                yt_status="1"
                true
              }
            if [[ "${yt_status}" == "0" ]]; then
              if [[ "$(cat ${yt_result} | tail -n1 | grep 'No video')" == "" ]]; then
                for file_name in $(ls -tr); do
                  if ffprobe -v error -f lavfi movie="${file_name}" > /dev/null 2>&1; then
                    flag=true
                  else
                    :
                  fi
                done
              else
                :
              fi
            elif [[ "${yt_status}" == "1" ]]; then
              if [[ "$(cat ${yt_result} | tail -n1 | grep 'No video')" != "" ]]; then
                flag=true
                not_video=true
              elif [[ "$(cat ${yt_result} | tail -n1 | grep 'Finished downloading playlist')" != "" ]]; then
                if (( "$(ls -tr | wc -l )" > 0 )); then
                  for file_name in $(ls -tr); do
                    if ffprobe -v error -f lavfi movie="${file_name}" > /dev/null 2>&1; then
                      flag=true
                    else
                      :
                    fi
                  done
                else
                  not_video=true
                fi
              else
                :
              fi
            else
              not_video=true
            fi
            if "${flag}"; then
              :
            else
              ((retry++)) || true
              sleep 1
            fi
          done
          if "${not_video}"; then
            status="notvideo" && \
            echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
            exit 2
          fi
      - name: Check and Convert Files
        if: ${{ success() }}
        shell: bash
        run: |
          dir=$(pwd) && \
          run_number=${{ github.run_number }} && \
          channel=${{ toJSON(github.event.client_payload.channel) }} && \
          message=${{ toJSON(github.event.client_payload.message) }} && \
          token=${{ toJSON(github.event.client_payload.token) }} && \
          link=${{ toJSON(github.event.client_payload.link) }} && \
          cd download && \
          files_num=$(ls -tr | wc -l) && \
          # if (( 26214400 < $(echo $(ls -trl | awk 'NR>1{print $5}' | tr \\n +)0 | bc) )); then
          if (( 10485760 < $(echo $(ls -trl | awk 'NR>1{print $5}' | tr \\n +)0 | bc) )); then
            file_list=()
            IFS=$'\n' && \
            for file_name in $(ls -tr); do
              # if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "${files_num}" )) )); then
              if (( "$(wc -c < "${file_name}")" <= 10485760 )); then
                :
              else
                file_list+=("${files_num}")
              fi
            done
            count=1
            for file_name in $(ls -tr); do
              # if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "${files_num}" )) )); then
              if (( "$(wc -c < "${file_name}")" <= 10485760 )); then
                :
              else
                num=$((count++))
                threads="$(nproc)"
                target_bytes="$((10 * 1024 * 1024))"
                target_bytes_eff="$(awk -v t="${target_bytes}" 'BEGIN{printf("%d\n",t*0.985)}')"
                aud_kbps=48
                max_overhead=0.05
                dur="$(ffprobe -v error -show_entries format=duration -of default=nw=1:nk=1 "${file_name}")"
                dur_s=${dur%.*};(( dur_s > 0 )) || dur_s=1
                {
                  progress_pb="$(mktemp)"
                  pid_pb="$(mktemp)"
                  nohup conv_progress.sh "${progress_pb}" ${num} ${#file_list[@]} "🔎Probing..." &
                  echo "${!}" > "${pid_pb}" && \
                  probe_log="$(mktemp)" && \
                  t_sec="$(awk -v d="${dur:-0}" 'BEGIN{t=d*0.05;if(t<1.0)t=1.0;if(t>10.0)t=10.0;printf("%.2f\n",t)}')" && \
                  mid_ss="$(awk -v d="${dur:-0}" -v t="${t_sec:-1}" 'BEGIN{ss=d/2.0-t/2.0;if(ss<0)ss=0;printf("%.2f\n",ss)}')"
                  {
                    ffmpeg -y -v info \
                      -ss "${mid_ss}" -t "${t_sec}" -i "${file_name}" \
                      -c:v libx265 -preset ultrafast -b:v 500k -maxrate 500k -bufsize 1M \
                      -c:a libopus -b:a "${aud_kbps}k" -vbr on -compression_level 10 -application audio \
                      -movflags +faststart -map_metadata -1 -map_chapters -1 -dn \
                      -f mp4 /dev/null 2>&1 | \
                    tee >(awk -f "${dir}/progress.awk" >> "${progress_pb}") \
                        >(cat > "${probe_log}") > /dev/null
                  }
                  cat "${pid_pb}" | xargs kill -term 2>/dev/null || :
                  mux_ov_pct="$(awk '/muxing overhead:/{val=$NF;gsub(/%/,"",val);print val}' "${probe_log}")"
                  if [[ -n "${mux_ov_pct}" ]]; then
                    extra="$(awk -v d="${dur_s}" 'BEGIN{e=0.005+(60.0/d)*0.001;if(e>0.010)e=0.010;printf("%.4f\n",e)}')"
                    overhead="$(awk -v m="${mux_ov_pct:-0}" -v ex="${extra}" -v mx="${max_overhead}" 'BEGIN{v=(m/100.0)+ex;if(v>mx)v=mx;if(v<0.0)v=0.0;printf("%.4f\n",v)}')"
                  else
                    overhead="${max_overhead}"
                  fi
                }
                {
                  Bv="$(awk -v t="${target_bytes_eff}" -v oh="${overhead}" -v a="${aud_kbps}" -v d="${dur_s}" 'BEGIN{tb=t*8;ab=a*1000*d;usable=(tb*(1.0-oh))-ab;if(usable<12000*d)usable=12000*d;printf("%d\n",usable/d)}')"
                  {
                    progress_an="$(mktemp)"
                    pid_an="$(mktemp)"
                    nohup conv_progress.sh "${progress_an}" ${num} ${#file_list[@]} "🧪Analyzing..." &
                    echo "${!}" > "${pid_an}" && \
                    mkdir -p "${dir}/analyze" && \
                    {
                      ffmpeg -y \
                        -i "${file_name}" \
                        -threads "${threads}" \
                        -c:v libx265 -preset ultrafast -b:v "${Bv}" -maxrate "${Bv}" -bufsize $(("${Bv}" * 2)) \
                        -an \
                        -pass 1 -passlogfile "${dir}/analyze/${file_name%.*}.log" \
                        -f mp4 /dev/null 2>&1 | \
                      awk -f "${dir}/progress.awk" >> "${progress_an}"
                    }
                    cat "${pid_an}" | xargs kill -term 2>/dev/null || :
                  }
                  {
                    progress_cv="$(mktemp)"
                    pid_cv="$(mktemp)"
                    nohup conv_progress.sh "${progress_cv}" ${num} ${#file_list[@]} "🔁Converting..." &
                    echo "${!}" > "${pid_cv}" && \
                    mkdir -p "${dir}/conv" && \
                    {
                      ffmpeg -i "${file_name}" \
                        -threads "${threads}" \
                        -c:v libx265 -preset medium -b:v "${Bv}" -maxrate "${Bv}" -bufsize $(("${Bv}" * 2)) \
                        -pix_fmt yuv420p -tag:v hvc1 \
                        -c:a libopus -b:a "${aud_kbps}k" -vbr on -compression_level 10 -application audio \
                        -movflags +faststart -map_metadata -1 -map_chapters -1 -dn \
                        -pass 2 -passlogfile "${dir}/analyze/${file_name%.*}.log" \
                        -fs 10MB \
                        "${dir}/conv/${file_name%.*}.mp4" 2>&1 | \
                      awk -f "${dir}/progress.awk" >> "${progress_cv}"
                    }
                    cat "${pid_cv}" | xargs kill -term 2>/dev/null || :
                  }
                }
                if [[ ${num} != ${#file_list[@]} ]]; then
                  sleep 2
                fi
              fi
            done
          fi
      - name: Upload files
        if: ${{ success() }}
        id: upload
        shell: bash
        run: |
          {
            curl -s -X POST \
              ${{ secrets.ENDPOINT_URL }} \
              -H "Accept: application/json" \
              -H "Content-type: application/json" \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              -o /dev/null \
              -d @- <<EOF
            {
              "status": "progress",
              "number": ${{ github.run_number }},
              "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
              "channel": ${{ toJSON(github.event.client_payload.channel) }},
              "message": ${{ toJSON(github.event.client_payload.message) }},
              "token": ${{ toJSON(github.event.client_payload.token) }},
              "link": ${{ toJSON(github.event.client_payload.link) }},
              "content": "⏫Uploading..."
            }
          EOF
          } || :
          dir=$(pwd) && \
          cd download && \
          IFS=$'\n' && \
          files_num="$(ls | wc -l)" && \
          if (( "${files_num}" > 1 )); then
            for file_name in $(ls -tr); do
              # if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
              if (( "$(wc -c < "${file_name}")" <= 10485760 )); then
                :
              # elif (( "$(wc -c < "${dir}/conv/${file_name%.*}.webm")" <= 26214400 )); then
              # elif (( "$(wc -c < "${dir}/conv/${file_name%.*}.webm")" <= 10485760 )); then
              elif (( "$(wc -c < "${dir}/conv/${file_name%.*}.mp4")" <= 10485760 )); then
                :
              else
                status="sizeover" && \
                echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
                exit 2
              fi
            done
            options=()
            options+=(-F 'status=success')
            options+=(-F 'number=${{ github.run_number }}')
            options+=(-F 'commandType=dl')
            options+=(-F 'actionType=multi')
            options+=(-F 'channel=${{ toJSON(github.event.client_payload.channel) }}')
            options+=(-F 'message=${{ toJSON(github.event.client_payload.message) }}')
            options+=(-F 'token=${{ toJSON(github.event.client_payload.token) }}')
            options+=(-F 'link=${{ toJSON(github.event.client_payload.link) }}')
            options+=(-F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}')
            # if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= 26214400 )); then
            if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= $(( 10485760 * "${files_num}" )) )); then
              options+=(-F "convert=false")
            else
              options+=(-F "convert=true")
            fi
            index=0
            list=()
            for file_name in $(ls -tr); do
              num=$((index++))
              # if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= 26214400 )); then
              if (( "$(echo $(ls -l | awk 'NR>1{print $5}' | tr \\n +)0 | bc)" <= $(( 10485760 * "${files_num}" )) )); then
                options+=(-F "name${num}=${file_name}")
                options+=(-F "file${num}=@${file_name}")
                list+=("${file_name}")
              else
                # if (( "$(wc -c < "${file_name}")" <= $(( 26214400 / "$(ls|wc -l)" )) )); then
                if (( "$(wc -c < "${file_name}")" <= 10485760 )); then
                  options+=(-F "name${num}=${file_name}")
                  options+=(-F "file${num}=@${file_name}")
                  list+=("${file_name}")
                else
                  # options+=(-F "name${num}=${file_name%.*}.webm")
                  options+=(-F "name${num}=${file_name%.*}.mp4")
                  # options+=(-F "file${num}=@${dir}/conv/${file_name%.*}.webm")
                  options+=(-F "file${num}=@${dir}/conv/${file_name%.*}.mp4")
                  # list+=("${dir}/conv/${file_name%.*}.webm")
                  list+=("${dir}/conv/${file_name%.*}.mp4")
                fi
              fi
            done
            total_size=$(echo $(echo "${list[@]}" | tr ' ' \\n | grep -v '^$' | xargs -I@ bash -c 'ls -l @' | awk '{print $5}' | grep -v '^$' | tr \\n '+')0 | bc)
            echo "Total size: ${total_size}"
            options+=(-F "size=${total_size}")
            # if (( "${total_size}" <= 26214400 )); then
            if (( "${total_size}" <= $(( 10485760 * "${files_num}" )) )); then
              options+=(-F "oversize=false")
            else
              options+=(-F "oversize=true")
            fi
            retry=0 && \
            flag=false && \
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              curl -s -X POST \
                -H "Content-type: multipart/form-data" \
                -m 18000 \
                --retry 100 \
                --retry-all-errors \
                -o /dev/null \
                "${options[@]}" \
                ${{ secrets.ENDPOINT_URL }} && \
              flag=true || \
              {
                ((retry++)) || true
              }
            done
          else
            file_name="$(ls)" && \
            # if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
            if (( "$(wc -c < "${file_name}")" <= 10485760 )); then
              echo "Total size: $(wc -c < "${file_name}")"
              retry=0 && \
              flag=false && \
              until "${flag}" || (( "${retry}" == 1000 )); do
                echo "Retry count: ${retry}"
                echo "Flag status: ${flag}"
                curl -s -X POST \
                  -H "Content-type: multipart/form-data" \
                  -m 18000 \
                  --retry 100 \
                  --retry-all-errors \
                  -o /dev/null \
                  -F "status=success" \
                  -F 'number=${{ github.run_number }}' \
                  -F "commandType=dl" \
                  -F "actionType=single" \
                  -F "convert=false" \
                  -F "oversize=false" \
                  -F "size=$(wc -c < "${file_name}")" \
                  -F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}' \
                  -F 'channel=${{ toJSON(github.event.client_payload.channel) }}' \
                  -F 'message=${{ toJSON(github.event.client_payload.message) }}' \
                  -F 'token=${{ toJSON(github.event.client_payload.token) }}' \
                  -F 'link=${{ toJSON(github.event.client_payload.link) }}' \
                  -F "name1=${file_name}" \
                  -F "file1=@${file_name}" \
                  ${{ secrets.ENDPOINT_URL }} && \
                flag=true || \
                {
                  ((retry++)) || true
                }
              done
            else
              # total_size=$(wc -c < "${dir}/conv/${file_name%.*}.webm")
              total_size=$(wc -c < "${dir}/conv/${file_name%.*}.mp4")
              echo "Total size: ${total_size}"
              # if (( "${total_size}" <= 26214400 )); then
              if (( "${total_size}" <= 10485760 )); then
                retry=0 && \
                flag=false && \
                until "${flag}" || (( "${retry}" == 1000 )); do
                  echo "Retry count: ${retry}"
                  echo "Flag status: ${flag}"
                  curl -s -X POST \
                    -H "Content-type: multipart/form-data" \
                    -m 18000 \
                    --retry 100 \
                    --retry-all-errors \
                    -o /dev/null \
                    -F "status=success" \
                    -F 'number=${{ github.run_number }}' \
                    -F "commandType=dl" \
                    -F "actionType=single" \
                    -F "convert=true" \
                    -F "oversize=false" \
                    -F "size=${total_size}" \
                    -F 'startTime=${{ toJSON(github.event.client_payload.startTime) }}' \
                    -F 'channel=${{ toJSON(github.event.client_payload.channel) }}' \
                    -F 'message=${{ toJSON(github.event.client_payload.message) }}' \
                    -F 'token=${{ toJSON(github.event.client_payload.token) }}' \
                    -F 'link=${{ toJSON(github.event.client_payload.link) }}' \
                    -F "name1=${file_name%.*}.mp4" \
                    -F "file1=@${dir}/conv/${file_name%.*}.mp4" \
                    ${{ secrets.ENDPOINT_URL }} && \
                  flag=true || \
                  {
                    ((retry++)) || true
                  }
                done
              else
                status="sizeover" && \
                echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
                exit 2
              fi
            fi
          fi
      - name: Link has expired
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == 'notfound' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -o /dev/null \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Video file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == 'notvideo' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -o /dev/null \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry, The video file did not exist at this link!"
          }
          EOF
      - name: Uploaded file size exceeded
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == 'sizeover'
          }}
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          if (( "$(ls | wc -l)" == 1 )); then
            original_size="$(ls -trlh | awk 'NR>1{printf "%sB", $5}')"
          else
            original_size="$(ls -trlh | awk 'NR==1{printf "%sB", $2}')"
          fi && \
          cd ${dir}/conv && \
          if (( "$(ls | wc -l)" == 1 )); then
            converted_size="$(ls -trlh | awk 'NR>1{printf "%sB", $5}')"
          else
            converted_size="$(ls -trlh | awk 'NR==1{printf "%sB", $2}')"
          fi && \
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -o /dev/null \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry, The file could not be uploaded because its size exceeds 10MB!\nFile Size: ${original_size} -> ${converted_size}"
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.download.outputs.status == '' &&
            steps.upload.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -o /dev/null \
            -d @- <<EOF
          {
            "status": "failure",
            "number": ${{ github.run_number }},
            "startTime": ${{ toJSON(github.event.client_payload.startTime) }},
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "token": ${{ toJSON(github.event.client_payload.token) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 10 minits and timed out."
          }
          EOF
      - name: Cleanup temp files
        if: ${{ always() && !cancelled() }}
        shell: bash
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -rf ./download
          rm -rf ./conv
          rm -rf ./analyze
          rm -f ./cookie.txt
          rm -f ./secrets.txt
          rm -f ./progress.awk
          rm -f /usr/local/bin/conv_progress.sh
